Reflect: Using a remote repository
Use the following reflection prompt:

When would you want to use a remote repository rather than keeping all your work local?

My most common use of remote repositories is when I'm collaborating with
other people on a project.  I also use them when I want to share my code
with someone, even if they just want to see my code and not contribute to
it.  I also sometimes use them when I want to be able to edit code from
multiple different computers and keep the code up-to-date on all the
computers.  Also, remotes can be a good way to keep a backup of my work.

When you're finished committing your changes, click "Next" to see how to pull those changes to your own computer.
--
Reflect: Manual vs. automatic pull
Now that you've both pushed changes to GitHub, and pulled changes from GitHub, add the following question and your thoughts on it to your reflections file:

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

I like pulling changes manually because that way, when I'm working on code, it doesn't change without me expecting it.  For example, if I know the new version of some code is broken, I might not want to pull that change until I the bug is fixed.

You may also want to commit and push your changes. When you're finished, click "Next" and Sarah will go over what to do if you want to share your changes to a repository and you don't have permission to modify the original.
--
Reflect: Forks, Clones, and Branches
Now that you've seen how you can make a copy of a repository on GitHub by forking it, go add the the following question and your thoughts on it to your reflections file:

Describe the differences between forks, clones, and branches. When would you use one instead of another?


Forks, clones, and branches are all ways to add new changes without
affecting the existing version.  With branches the new changes are
added in the same repository.  Forking and cloning both copy an entire
repository to a new location.  The difference between forking and
cloning is that forking is a special construct made by GitHub.  You
can only fork a GitHub repository to another location on GitHub, while
you can clone any Git repository to anywhere you have access to.

I use branching for most cases where I want to add new changes to a
repository while keeping an easy reference to a previous version,
especially when collaborating with other people.  I clone a repository
on GitHub when I want to work on that repository locally rather than
using the GitHub website.  I fork a repository on GitHub when I want
to make changes to that repository public, but I don't have permission
to modify the original.

You may also want to commit and push your changes. When you're
finished, click "Next".
--
Reflect: Local copies of remote branches
Now that you've seen how to update your local copy of remote branches,
and how to combine conflicting changes from multiple people, add the
following question and your thoughts on it to your reflections file:

What is the benefit of having a copy of the last known state of the
remote stored locally?

If I am about to go without Internet access for a while, for example
to work on a plane, I can update my local copy before I leave.  I can
do this even if I'm not ready to merge those changes into my own
branches yet.  Then if I want, I can perform the merge while offline,
or I need to know what the remote version is at some point, I have an
easy way to access it.

You may also want to commit and push your changes. When you're
finished, click "Next" and Caroline will introduce a GitHub feature
called a Pull Request that makes collaboration easier.
--
